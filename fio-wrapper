#!/bin/bash

set -e

PN="${BASH_SOURCE[0]##*/}"
PD="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

DIRECT="${DIRECT:-1}"
IOPATH="${IOPATH:-fio_data}"
OUTPUT_DIR="${OUTPUT_DIR:-./}"
TESTS="${TESTS:-randread,read,write,randrw}"
TEST_SECOND="${TEST_SECOND:-15}"
TEST_FILE_MB="${TEST_FILE_MB:-32}"
KEEP_JOB="${KEEP_JOB:-0}"
CREATE_RAND_ONLY="${CREATE_RAND_ONLY:-0}"

MULTI_USERS="${MULTI_USERS:-1,8,16,32,64}"
RANDREAD_SIZES="${RANDREAD_SIZES:-4,8}"
READ_SIZES="${READ_SIZES:-4,8,32,128,1024}"
WRITE_SIZES="${WRITE_SIZES:-4,8,32,128,1024}"
RANDRW_SIZES="${RANDRW_SIZES:-4,8}"

type fio dd stat blockdev tee perl dirname basename >/dev/null

function usage() {
	cat <<EOF
Usage: ${PN} [Options]
Options:
  -h         : show this help message
  -d [0|1]   : do/don't directio, default: '${DIRECT}'
  -p <path>  : IO path where fio creates a fio and reads and writes, default: '${IOPATH}'
  -P <path>  : create random file at the path and exit, default: '${IOPATH}'
  -o <path>  : output directory, where to put output files, default: '${OUTPUT_DIR}'
  -t <tests> : tests to run, default: '${TESTS}', options are
                   randread - IOPS test: (${RANDREAD_SIZES})k by (${MULTI_USERS}) users
                   read     - MB/s test: (${READ_SIZES})k by (${MULTI_USERS}) users
                   write    - redo test, ie sync seq writes: (${WRITE_SIZES})k by (${MULTI_USERS}) users
                   randrw   - workload test: (${RANDRW_SIZES})k read write by (${MULTI_USERS}) users
  -s <num>   : seconds to run each test for, default: '${TEST_SECOND}'
  -m <num>   : megabytes for the test I/O file to be used, default: '${TEST_FILE_MB}'
  -k         : keep work job file after run

Example:
  ${PN} -p /mnt/fiotest -t randread,radnrw -s 60 -m 65536
EOF
	[ $# -gt 0 ] && { echo ; echo "$@" ; exit 1 ; }
	exit 0
}

function process_config() {
	TESTS="$(sed 's/,\+/ /g' <<<"${TESTS}")"
	MULTI_USERS="$(sed 's/,\+/ /g' <<<"${MULTI_USERS}")"
	RANDREAD_SIZES="$(sed 's/,\+/ /g' <<<"${RANDREAD_SIZES}")"
	READ_SIZES="$(sed 's/,\+/ /g' <<<"${READ_SIZES}")"
	WRITE_SIZES="$(sed 's/,\+/ /g' <<<"${WRITE_SIZES}")"
	RANDRW_SIZES="$(sed 's/,\+/ /g' <<<"${RANDRW_SIZES}")"
}

opt="$(getopt -o hd:p:P:o:t:s:m:k -- "$@")" || usage "Parse options failed"

eval set -- "${opt}"
while true ; do
	case "${1}" in
	-h) process_config ; usage ; shift ;;
	-d) DIRECT="${2}" ; shift 2 ;;
	-p) IOPATH="${2}" ; shift 2 ;;
	-P) IOPATH="${2}" ; CREATE_RAND_ONLY="1" ; shift 2 ;;
	-o) OUTPUT_DIR="${2}" ; shift 2 ;;
	-t) TESTS="${2}" ; shift 2 ;;
	-s) TEST_SECOND="${2}" ; shift 2 ;;
	-m) TEST_FILE_MB="${2}" ; shift 2 ;;
	-k) KEEP_JOB="1" ; shift ;;
	--) shift ; break ;;
	*) echo "Internal error!" ; exit 1 ;;
	esac
done

function echo_job_global() {
	cat <<EOF
[global]
filename=$(basename "${IOPATH}")
directory=$(dirname "${IOPATH}")
direct=${DIRECT}
runtime=${TEST_SECOND}
randrepeat=0
end_fsync=1
group_reporting=1
ioengine=psync
fadvise_hint=0

EOF
}

function echo_config() {
	local i=12
	cat <<EOF
Configuration:
  IOPATH       = '${IOPATH}'
  OUTPUT_DIR   = '${OUTPUT_DIR}'
  TESTS        = '${TESTS}'
  TEST_SECOND  = $(printf "%-${i}s" "'${TEST_SECOND}'") TEST_FILE_MB = $(printf "%-${i}s" "'${TEST_FILE_MB}'")
  DIRECT       = $(printf "%-${i}s" "'${DIRECT}'") KEEP_JOB = $(printf "%-${i}s" "'${KEEP_JOB}'")

EOF
}

function create_fio_random_data() {
	echo "Creating fio random data ..."
	mkdir -p "$(dirname "${IOPATH}")"
	dd if=/dev/urandom of="${IOPATH}" bs=512 count=$(( ${TEST_FILE_MB} * 1024 * 1024 / 512 ))
}

function run_fio() {
	local job="${1}"
	local block_sizes="${2}"
	local user_nums="${3}"

	for block_size_kb in ${block_sizes} ; do
		for usernum in ${user_nums} ; do
			jobprefix="${OUTPUT_DIR%%/}/fio_${job}_u$(printf "%02d" ${usernum})_kb$(printf "%04d" ${block_size_kb})"
			echo_job_global > "${jobprefix}.job"
			cat >> "${jobprefix}.job" <<-EOF
			[job]
			rw=${job}
			bs=${block_size_kb}k
			numjobs=${usernum}

			EOF
			echo "$(date): Run fio ${job} ${block_size_kb}k block ${usernum} users"
			fio "${jobprefix}.job" > "${jobprefix}.out"
			[ "${KEEP_JOB}" != "1" ] && rm -f "${jobprefix}.job"
		done
	done
}

function run_fioparse() {
	local f
	for f in "${OUTPUT_DIR%%/}/fio_"*.out ; do
		echo "filename=${f}"
		cat "${f}"
		echo "END"
	done | perl "${PD}/_fioparse.pl" "$@"
}

function main() {
	local job

	if [ -z "${IOPATH}" ] || [ "${IOPATH}" == "/dev/null" ] ; then
		TESTS=""
	elif [ -e "${IOPATH}" ] ; then
		if [ -b "${IOPATH}" ] ; then
			TEST_FILE_MB="$(( $(blockdev --getsize64 "${IOPATH}") / 1024 / 1024 ))"
			echo "${IOPATH} is a block device, auto setup TEST_FILE_MB=${TEST_FILE_MB}"
		elif [ -d "${IOPATH}" ] ; then
			IOPATH="${IOPATH%%/}/fio_data"
			main
			return $?
		elif [ ! -f "${IOPATH}" ] ; then
			create_fio_random_data
		elif [ "$(stat -c %s "${IOPATH}")" -lt $(( ${TEST_FILE_MB} * 1024 * 1024 )) ] ; then
			create_fio_random_data
		else
			true
		fi
	else
		create_fio_random_data
	fi

	echo_config

	[ "${CREATE_RAND_ONLY}" == "1" ] && return 0

	mkdir -p "${OUTPUT_DIR}"

	# generate job files
	for job in ${TESTS} ; do
		case "${job}" in
		randread)	run_fio "${job}" "${RANDREAD_SIZES}" "${MULTI_USERS}" ;;
		read)		run_fio "${job}" "${READ_SIZES}" "${MULTI_USERS}" ;;
		write)		run_fio "${job}" "${WRITE_SIZES}" "${MULTI_USERS}" ;;
		randrw)		run_fio "${job}" "${RANDRW_SIZES}" "${MULTI_USERS}" ;;
		esac
	done

	run_fioparse verbose | tee "${OUTPUT_DIR}/fio_summary"
	run_fioparse verbose fillzero | tee "${OUTPUT_DIR}/fio_summary.txt" >/dev/null
	sed "s/\\s\\+/,/g ; s/^,//g" "${OUTPUT_DIR}/fio_summary.txt" | tee "${OUTPUT_DIR}/fio_summary.csv" >/dev/null
}

process_config
main

